#ifndef EFI_PROTOCOL_PATH_DEVICEPATHUTILITIES_H
#define EFI_PROTOCOL_PATH_DEVICEPATHUTILITIES_H

#include <EFI/Types.h>
#include <EFI/Protocol/Path/DevicePath.h>

#define EFI_DEVICE_PATH_UTILITIES_PROTOCOL_GUID \
         { 0x379BE4E, 0xD706, 0x437D, { 0xB0, 0x37, 0xED, 0xB8, 0x2F, 0xB7, 0x72, 0xA4 } }

typedef struct _EFI_DEVICE_PATH_UTILITIES_PROTOCOL {
    UINTN (EFIAPI *GetDevicePathSize)(IN CONST EFI_DEVICE_PATH_PROTOCOL*);
    EFI_DEVICE_PATH_PROTOCOL* (EFIAPI *DuplicateDevicePath)(IN CONST EFI_DEVICE_PATH_PROTOCOL*);
    EFI_DEVICE_PATH_PROTOCOL* (EFIAPI *AppendDevicePath)(IN CONST EFI_DEVICE_PATH_PROTOCOL*, IN CONST EFI_DEVICE_PATH_PROTOCOL*);
    EFI_DEVICE_PATH_PROTOCOL* (EFIAPI *AppendDeviceNode)(IN CONST EFI_DEVICE_PATH_PROTOCOL*, IN CONST EFI_DEVICE_PATH_PROTOCOL*);
    EFI_DEVICE_PATH_PROTOCOL* (EFIAPI *AppendDevicePathInstance)(IN CONST EFI_DEVICE_PATH_PROTOCOL*, IN CONST EFI_DEVICE_PATH_PROTOCOL*);
    EFI_DEVICE_PATH_PROTOCOL* (EFIAPI *GetNextDevicePathInstance)(IN OUT EFI_DEVICE_PATH_PROTOCOL*, OUT UINTN OPTIONAL);
    BOOLEAN (EFIAPI *IsDevicePathMultiInstance)(IN CONST EFI_DEVICE_PATH_PROTOCOL*);
    EFI_DEVICE_PATH_PROTOCOL* (EFIAPI *CreateDeviceNode)(IN UINT8, IN UINT8, IN UINT16);
} EFI_DEVICE_PATH_UTILITIES_PROTOCOL;

#endif // EFI_PROTOCOL_PATH_DEVICEPATHUTILITIES_H